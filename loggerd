#!/usr/bin/env python3

import os, sys
import logging
from logging.config import fileConfig
import asyncio
import uvloop
import click
import signal
import serial
from configobj import ConfigObj
from mboxagent.core import IngressTunnel, PacketCosumer
from mboxagent.internet import device_connection_checker, ping_connection_checker
from mboxagent.serial_transport import SerialTransport
from mboxagent.storage import StorageRunner
from mboxagent.pin import *
from mboxagent.heartbeat import heartbeat
from mboxagent.button import button_detect
from mboxagent.counter import fast_counter_detect, direct_counter_detect
from mboxagent.temperature import TemperatureRunner
from mboxagent.rc522 import RC522Runner
import RPi.GPIO as GPIO

asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())

@click.group()
def cli():
    pass

@cli.command()
@click.option('--file', default='config.ini', help='config file path')
def server(file):

    led_on(POWER_LED)
    # a work around, in case LED will binking accendtially
    GPIO.setup(LED1, GPIO.IN)
    GPIO.setup(LED2, GPIO.IN)
    GPIO.setup(LED3, GPIO.IN)
    GPIO.setup(LED4, GPIO.IN)
    GPIO.setup(LED5, GPIO.IN)
    GPIO.setup(LED6, GPIO.IN)
    
    # Set up logger's config file
    fileConfig(file, disable_existing_loggers=False)
    # For normal config
    config = ConfigObj(file)
    logger = logging.getLogger(__name__)
    pidfile = config['default']['pidfile']

    def signal_handler(sig, frame):
        os.unlink(pidfile)
        exit()

    if os.path.isfile(pidfile):
        logger.info("<{} is already running, exit>".format(pidfile))
        sys.exit()

    logger.info("<mbox-agent start>")
    open(pidfile, "w").write(str(os.getpid()))   
    signal.signal(signal.SIGTERM, signal_handler)
    try:
        loop = asyncio.get_event_loop()
        serial_coros = list()
        frame_queues = (asyncio.Queue(), asyncio.Queue())
        storage_queue = asyncio.Queue()

        async def create_serial_connection(loop, protocol_factory, serial_port):
            protocol = protocol_factory(frame_queues)
            transport = SerialTransport(loop, protocol, serial_port)
            return (transport, protocol)

        if config.get('input') is not None:
            for key, item in config['input'].items():
                if item.get('type') == 'serial':
                    ser = serial.Serial(item.get('name'), baudrate=item.get('baudrate'), \
                            timeout=float(item.get('rx_timeout')))
                    coro = create_serial_connection(loop, IngressTunnel, ser)
                    serial_coros.append(coro)
            loop.run_until_complete(asyncio.gather(*serial_coros))

        if config.get('heartbeat') is not None:
            heartbeat_timeout = int(config['heartbeat'].get('timeout'))
            loop.create_task(heartbeat(loop, storage_queue, heartbeat_timeout))

        if config.get('multi-counter') is not None:
            fast_freq = config['counter'].get('fast_freq') 
            if fast_freq is not None:
                loop.create_task(fast_counter_detect(loop, storage_queue, float(fast_freq)))
                loop.create_task(fast_counter_detect(loop, storage_queue, float(fast_freq), 
                    eventcode = 3202, pin = 21, led = 13))
            direct_freq = config['counter'].get('direct_freq')
            if direct_freq is not None:
                loop.create_task(direct_counter_detect(loop, storage_queue, float(direct_freq)))
        
        if config.get('counter') is not None:
            fast_freq = config['counter'].get('fast_freq') 
            if fast_freq is not None:
                loop.create_task(fast_counter_detect(loop, storage_queue, float(fast_freq)))
            direct_freq = config['counter'].get('direct_freq')
            if direct_freq is not None:
                loop.create_task(direct_counter_detect(loop, storage_queue, float(direct_freq)))

        if config.get('button') is not None:
            loop.create_task(button_detect(loop, storage_queue))

        loop.create_task(PacketCosumer(loop, frame_queues, storage_queue, config).run())

        loop.create_task(StorageRunner(loop, storage_queue, config).run())

        if config.get('multi_temp') is not None:
            loop.create_task(TemperatureRunner(loop, storage_queue, cs = 7, event_code = 3501))
            loop.create_task(TemperatureRunner(loop, storage_queue, cs = 8, miso = 20, mosi = 21, clk = 16, event_code = 3502))
            loop.create_task(TemperatureRunner(loop, storage_queue, cs = 25, miso = 27, mosi = 22, clk = 17, event_code = 3503))

        if config.get('temperature') is not None:
            loop.create_task(TemperatureRunner(loop, storage_queue))

        if config.get('rc522') is not None:
            loop.create_task(RC522Runner(loop, storage_queue))

        if config.get('internet') is not None:
            internet_timeout = int(config['internet'].get('timeout'))
            loop.create_task(ping_connection_checker(loop, storage_queue, internet_timeout))

            watch_nic_list = config['internet'].get('watch')

            if type(watch_nic_list) is str:
                watch_nic_list = [watch_nic_list]
            elif watch_nic_list is None:
                watch_nic_list = []
            else:
                pass
            tasks = [device_connection_checker(storage_queue, nic) for nic in watch_nic_list]
            loop.run_until_complete(asyncio.gather(*tasks))

        loop.run_forever()
    except Exception as e:
        logger.info("<Loop exception: {}>".format(str(e)))
    finally:
        logger.info("<mbox-agent end>")
        loop.close()
        os.unlink(pidfile)

if __name__ == "__main__":
    cli()

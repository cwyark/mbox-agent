#!/usr/bin/env python3

import os, sys
import logging
import logging.handlers
import asyncio
import uvloop
import click
from boxagent.box import BoxPacketReceiver, SERIAL_RECV_TIMEOUT
from boxagent.event import internet_connection_checker
from boxagent.serial_transport import SerialTransport, create_serial_connection

asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())

# Set up the logging system
PID_FILE_PATH = "/tmp/box.pid"

logging.basicConfig(level=logging.DEBUG, 
        format="%(name)-12s %(levelname)-8s %(message)s", 
        handlers = [ logging.handlers.SysLogHandler(address = '/dev/log')
            ]
        )
@click.command()
@click.option('--device', default="/dev/ttyS0", help='serial device name')
@click.option('--baudrate', default=115200, type=int, help='serial device baudrate')
@click.option('--pidfile', default=PID_FILE_PATH, help='pidfile path')
@click.option('--watch-nic', help="watch NIC list")
def server(device, baudrate, pidfile, watch_nic):
    logger = logging.getLogger(__name__)

    if os.path.isfile(pidfile):
        logger.info("[EVT]<daemon> [CAUSE]<none> [MSG]<{} is already running, exit>".format(pidfile))
        sys.exit()

    logger.info("[EVT]<daemon> [CAUSE]<none> [MSG]<BoxAgent start>")

    open(pidfile, "w").write(str(os.getpid()))   

    try:
        loop = asyncio.get_event_loop()
        ser_coro = create_serial_connection(loop, BoxPacketReceiver, device, baudrate=baudrate, timeout=SERIAL_RECV_TIMEOUT)
        ser_trans, _ = loop.run_until_complete(ser_coro)
        
        if watch_nic is not None:
            watch_nic_list = watch_nic.split(',')

            tasks = [internet_connection_checker(ser_trans, nic) for nic in watch_nic_list]

            loop.run_until_complete(asyncio.gather(*tasks))

        loop.run_forever()
    except Exception as e:
        logger.info("[EVT]<daemon> [CAUSE]<none> [MSG]<Loop exception: {}>".format(str(e)))
    finally:
        logger.info("[EVT]<daemon> [CUASE]<none> [MSG]<BoxAgent end>")
        loop.close()
        os.unlink(pidfile)

if __name__ == "__main__":
    server()

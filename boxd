#!/usr/bin/env python3

import os, sys
import logging
from logging.config import fileConfig
import asyncio
import uvloop
import click
import signal
import serial
from configobj import ConfigObj
from boxagent.core import IngressTunnel, PacketCosumer
from boxagent.event import internet_connection_checker
from boxagent.serial_transport import SerialTransport
from boxagent.storage import StorageRunner

asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())

@click.group()
def cli():
    pass

@cli.command()
@click.option('--file', default='config.ini', help='config file path')
def server(file):
    # Set up logger's config file
    fileConfig(file, disable_existing_loggers=False)
    # For normal config
    config = ConfigObj(file)
    logger = logging.getLogger(__name__)
    pidfile = config['default']['pidfile']

    def signal_handler(sig, frame):
        os.unlink(pidfile)
        exit()

    if os.path.isfile(pidfile):
        logger.info("<{} is already running, exit>".format(pidfile))
        sys.exit()

    logger.info("<BoxAgent start>")
    open(pidfile, "w").write(str(os.getpid()))   
    signal.signal(signal.SIGTERM, signal_handler)
    try:
        loop = asyncio.get_event_loop()
        serial_coros = list()
        frame_queues = (asyncio.Queue(), asyncio.Queue())
        packet_queue = asyncio.Queue()

        async def create_serial_connection(loop, protocol_factory, serial_port):
            protocol = protocol_factory(frame_queues)
            transport = SerialTransport(loop, protocol, serial_port)
            return (transport, protocol)

        for key, item in config['input'].items():
            if item.get('type') == 'serial':
                ser = serial.Serial(item.get('name'), baudrate=item.get('baudrate'), \
                        timeout=float(item.get('rx_timeout')))
                coro = create_serial_connection(loop, IngressTunnel, ser)
                serial_coros.append(coro)

        loop.run_until_complete(asyncio.gather(*serial_coros))
        loop.create_task(PacketCosumer(loop, frame_queues, packet_queue, config).run())
        loop.create_task(StorageRunner(loop, packet_queue, config).run())

        watch_nic_list = config['internet'].get('watch')

        if type(watch_nic_list) is str:
            watch_nic_list = [watch_nic_list]
        elif watch_nic_list is None:
            watch_nic_list = []
        else:
            pass
        tasks = [internet_connection_checker(packet_queue, nic) for nic in watch_nic_list]
        loop.run_until_complete(asyncio.gather(*tasks))

        loop.run_forever()
    except Exception as e:
        logger.info("<Loop exception: {}>".format(str(e)))
    finally:
        logger.info("<BoxAgent end>")
        loop.close()
        os.unlink(pidfile)

if __name__ == "__main__":
    cli()

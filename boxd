#!/usr/bin/env python3

import os, sys
import logging
from logging.config import fileConfig
import asyncio
import uvloop
import click
import signal
from configobj import ConfigObj
from boxagent.core import IngressTunnel
from boxagent.event import internet_connection_checker
from boxagent.serial_transport import SerialTransport, create_serial_connection

asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())

@click.group()
def cli():
    pass

@cli.command()
@click.option('--file', default='config.ini', help='config file path')
@click.option('--watch-nic', help="watch NIC list")
def server(file, watch_nic):

    # Set up logger's config file
    fileConfig(file)

    config = ConfigObj(file)

    logger = logging.getLogger(__name__)

    pidfile = config['default']['pidfile']
    
    def signal_handler(sig, frame):
        os.unlink(pidfile)
        exit()

    if os.path.isfile(pidfile):
        logger.info("[EVT]<daemon> [CAUSE]<none> [MSG]<{} is already running, exit>".format(pidfile))
        sys.exit()

    logger.info("[EVT]<daemon> [CAUSE]<none> [MSG]<BoxAgent start>")

    open(pidfile, "w").write(str(os.getpid()))   

    signal.signal(signal.SIGTERM, signal_handler)

    try:
        loop = asyncio.get_event_loop()

        inputs = config['input']
        
        serial_coros = list()

        for key, item in config['input'].items():
            if item.get('type') == 'serial':
                serial_coros.append(create_serial_connection(loop, IngressTunnel, \
                        item.get('name'), baudrate=item.get('baudrate'), \
                        timeout=float(item.get('rx_timeout'))))

        loop.run_until_complete(asyncio.gather(*serial_coros))
        
       #if watch_nic is not None:
       #    watch_nic_list = watch_nic.split(',')

       #    tasks = [internet_connection_checker(ser_trans, nic) for nic in watch_nic_list]

       #    loop.run_until_complete(asyncio.gather(*tasks))

        loop.run_forever()
    except Exception as e:
        logger.info("[EVT]<daemon> [CAUSE]<none> [MSG]<Loop exception: {}>".format(str(e)))
    finally:
        logger.info("[EVT]<daemon> [CUASE]<none> [MSG]<BoxAgent end>")
        loop.close()
        os.unlink(pidfile)

if __name__ == "__main__":
    cli()
